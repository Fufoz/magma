#version 450

#include "quaternion.h.glsl"
#include "debug.h.glsl"

struct BoidState
{
	vec4 orientation;
	vec4 position;
	vec4 direction;
	vec4 up;
};

struct Plane
{
	vec4 normal;
	vec4 point;
};

struct Ray
{
	vec3 origin;
	vec3 direction;
};

layout(push_constant) uniform BoidsCommon
{
	float minDistance;
	float flockRadius;
	float tankSize;
	float deltaTime;
	int   boidsCount;
	int   spherePointsCount;
}Common;

layout(std430, set = 0, binding = 0) buffer BoidsState {
	BoidState states[];
};

//later gets passed to the vertex shader
layout(std430, set = 0, binding = 1) writeonly buffer InstanceInfos {
	mat4 instanceTransforms[];
};

layout(std430, set = 0, binding = 2) buffer SpherePoints {
	vec4 spherePoints[];
};

layout(set = 0, binding = 3) uniform TankPlanes {
	Plane planes[6];
}tankPlanes;

//later gets passed as input to debug vertex shader
layout(std430, set = 0, binding = 4) writeonly buffer DebugVectors {
	DebugInfo debugVectors[];
};

layout(local_size_x_id = 100) in;

//rule 1 separation ( steer away from other boids if a distance to them is less than or equal to MIN_DISTANCE )
//rule 2 alignment ( look approximately at the same direction as any other boids)
//rule 3 cohesion ( steer to the center of mass of nearby fishes)
// BoidState rule1(BoidState state)
// {
// 
// }

// bool rayPlaneIntersect(vec4 ray)
// {
// 
// }


float distanceBetween(vec3 first, vec3 second)
{
	float xdelta = second.x - first.x;
	float ydelta = second.y - first.y;
	float zdelta = second.z - first.z;

	return sqrt(xdelta * xdelta + ydelta * ydelta + zdelta * zdelta);
}

vec3 separation(BoidState currentBoid, uint currentBoidId)
{
	vec3 shiftDir = vec3(0.0, 0.0, 0.0);
	for(int i = 0; i < Common.boidsCount; i++)
	{
		if(i != currentBoidId)
		{
			if(distanceBetween(currentBoid.position.xyz, states[i].position.xyz) < Common.minDistance)
			{
				shiftDir += (currentBoid.position - states[i].position).xyz;
			}
		}
	}

	return shiftDir;
}

float planeSDF(Plane plane, vec3 point)
{
	return dot(point - plane.point.xyz, plane.normal.xyz);
}

bool sphereCast(Ray ray, float sphereRadius, float maxDistance, out float closestDistance)
{
	float t = 1.f;
	float delta = 0.1f;

	int planeCount = 6;
	float minDistance = maxDistance;//max float
	closestDistance = maxDistance;
	while(t < maxDistance)
	{
		float sphereDelta = 0.f;
		for(int i = 0; i < planeCount; i++)
		{
			float distance = planeSDF(tankPlanes.planes[i], ray.origin + ray.direction * (t));

			if(distance > 0 && distance < minDistance)
			{
				minDistance = distance;
				closestDistance = distance;
				sphereDelta = distance;
			}
		}

		t += max(delta, sphereDelta);
	}

	if(minDistance < sphereRadius)
	{
		return true;
	}

	return false;
}


bool rayPlaneIntersect(Ray ray, Plane plane, out float distance)
{
	float denominator = dot(ray.direction.xyz, plane.normal.xyz);
	if(denominator > 0)
	{
		return false;
	}

	if(abs(denominator) < 0.001)
	{
		return false;
	}

	float nominator = dot((plane.point.xyz - ray.origin), plane.normal.xyz);
	float tmin = nominator / denominator;
	if(tmin < 0)
	{
		return false;
	}

	distance = tmin;
	return true;
}

bool isAboutToCollide(BoidState boid)
{
	Ray forwardRay;
	forwardRay.origin = boid.position.xyz;
	forwardRay.direction = boid.direction.xyz;
	float minDistance = 0.f;
	return sphereCast(forwardRay, 3.f, Common.minDistance, minDistance);
}

vec3 findNonBlockingDirection(BoidState boid)
{
	Ray forwardRay;
	forwardRay.origin = boid.position.xyz;
	forwardRay.direction = boid.direction.xyz;

	vec3 transformedRayPosition = boid.position.xyz;
	float largestUnobstructedDistance = 0;
	
	Ray bestRay = forwardRay;
	
	mat4 rotMat = quatToRotationMat(boid.orientation);
	float maxDistance = 0;
	// int discardCount = 0;

	for(int i = 0; i < Common.spherePointsCount; i++)
	{
		Ray currentRay;
		currentRay.origin = boid.position.xyz;
		// currentRay.direction =  spherePoints[i].xyz;
		currentRay.direction = (rotMat * spherePoints[i]).xyz;

		//discard rays that are behind fish forward direction
		if(dot(forwardRay.direction, currentRay.direction) < -0.5)
		{
			// discardCount++;
			continue;
		}
	
		float hitDistance = 0.f;
		if(sphereCast(currentRay, 3.f, Common.minDistance, hitDistance))
		{
			if(hitDistance > maxDistance)
			{
				maxDistance = hitDistance;
				bestRay = currentRay;
			}
		}
		else
		{
			return currentRay.direction;
		}
	}

	return bestRay.direction;
}

void fillDebugData(uint gx, vec3 nonBlockDir)
{
	vec4 upColor = vec4(1.0, 0.0, 0.0, 0.0);
	vec4 forwardColor = vec4(0.0, 1.0, 0.0, 0.0);
	vec4 nonBlockColor = vec4(0.494, 0.509, 0.925, 0.0);

	float scaleCoeff = 3.f;

	debugVectors[gx*6].linePoint = states[gx].position;
	debugVectors[gx*6].color = upColor;
	debugVectors[gx*6 + 1].linePoint = states[gx].position + scaleCoeff*states[gx].up;
	debugVectors[gx*6 + 1].color = upColor;

	debugVectors[gx*6 + 2].linePoint = states[gx].position;
	debugVectors[gx*6 + 2].color = forwardColor;
	debugVectors[gx*6 + 3].linePoint = states[gx].position + scaleCoeff*states[gx].direction;
	debugVectors[gx*6 + 3].color = forwardColor;


	debugVectors[gx*6 + 4].linePoint = states[gx].position;
	debugVectors[gx*6 + 4].color = nonBlockColor;
	debugVectors[gx*6 + 5].linePoint = states[gx].position + scaleCoeff*vec4(nonBlockDir, 1.0);
	debugVectors[gx*6 + 5].color = nonBlockColor;
}

void main()
{	
	uint gx = gl_GlobalInvocationID.x;
	if(gx > Common.boidsCount)
	{
		return;
	}
	vec3 previousDirection = states[gx].direction.xyz;
	vec3 newDirection = previousDirection;
	float step = 0.1f;
	
	// if(abs(states[gx].position.x) > Common.tankSize /2.f ||
	// 	abs(states[gx].position.y) > Common.tankSize /2.f ||
	// 	abs(states[gx].position.z) > Common.tankSize /2.f) {

	// 	step = 0.f;
	// }

	if(isAboutToCollide(states[gx]))
	{
		// if(newDirection.z < -0.99)
		// 	step = 0.f;
		vec3 nonBlockingDir = findNonBlockingDirection(states[gx]);
		newDirection = previousDirection + 0.1 * (nonBlockingDir - previousDirection);
	}

	states[gx].orientation = quatMultiply(rotateFromTo(previousDirection, newDirection), states[gx].orientation);
	
	mat4 rotMat = quatToRotationMat(rotateFromTo(previousDirection, newDirection));
	
	states[gx].direction = rotMat * vec4(states[gx].direction.xyz, 1.0);
	states[gx].up = rotMat * states[gx].up;

	states[gx].position += step * (states[gx].direction);
	
	fillDebugData(gx, newDirection);

	
	instanceTransforms[gx] = 
		loadTranslation(states[gx].position.xyz) *
		quatToRotationMat(states[gx].orientation);

}